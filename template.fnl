(fn apply-variable [variable value html]
  (string.gsub
    html
    variable
    value))

(fn apply-title [title html]
  (->> html
       (apply-variable
         "${title}"
         (or title ""))
       (apply-variable
         "${header}"
         (or title ""))))

(fn apply-footer [footer html]
  (->> html
       (apply-variable
         "${footer}"
         (or footer "Generated by Fox"))))

(fn apply-css [css html]
  (let [css-href (if css (.. "<link rel=\"stylesheet\" href=\"" css "\">") "")]
    (apply-variable
      "${css}"
      css-href
      html)))

(fn apply-headings [data]
  (accumulate [acc "" _ v (pairs data.org.headings)]
    (.. 
      acc
      "<h2>" v "</h2>")))

(fn apply-main [data html]
  (apply-variable 
    "${main}"
    (apply-headings data)
    html))

(fn apply-template [data html]
  (->> 
    html
    (apply-css data.css)
    (apply-title data.org.title)
    (apply-main data)
    (apply-footer data.footer)))


(comment
  (accumulate [acc 0  _ v (pairs [1 2 3 4 5])]
    (+ acc v))
  (let [t (require :template)]
    (t.apply-template {:org {:headings ["Hello" "Goodbye"]}} "${main}")))

{: apply-template }
